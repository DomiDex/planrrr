name: Worker Service Tests

on:
  push:
    paths:
      - 'apps/worker/**'
      - 'packages/database/**'
      - 'packages/redis/**'
      - '.github/workflows/worker-tests.yml'
  pull_request:
    paths:
      - 'apps/worker/**'
      - 'packages/database/**'
      - 'packages/redis/**'

jobs:
  test:
    name: Test Worker Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: planrrr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma client
        run: pnpm db:generate
        working-directory: ./packages/database
      
      - name: Run database migrations
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/planrrr_test?schema=public
        working-directory: ./packages/database
      
      - name: Run unit tests
        run: pnpm test:run
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/planrrr_test?schema=public
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test
        working-directory: ./apps/worker
      
      - name: Run test coverage
        run: pnpm test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/planrrr_test?schema=public
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test
        working-directory: ./apps/worker
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/worker/coverage/lcov.info
          flags: worker
          name: worker-coverage
          fail_ci_if_error: false
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            apps/worker/coverage/
            apps/worker/test-results/
          retention-days: 7

  lint:
    name: Lint Worker Service
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run linter
        run: pnpm lint
        working-directory: ./apps/worker
      
      - name: Check types
        run: pnpm check-types
        working-directory: ./apps/worker

  build:
    name: Build Worker Service
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma client
        run: pnpm db:generate
        working-directory: ./packages/database
      
      - name: Build worker
        run: pnpm build
        working-directory: ./apps/worker
      
      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "Build failed: index.js not found"
            exit 1
          fi
        working-directory: ./apps/worker

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: planrrr_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma client
        run: pnpm db:generate
        working-directory: ./packages/database
      
      - name: Run database migrations
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/planrrr_perf?schema=public
        working-directory: ./packages/database
      
      - name: Run performance tests
        run: pnpm test -- --run --grep="Performance:"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/planrrr_perf?schema=public
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test
          DEBUG_PERFORMANCE: true
        working-directory: ./apps/worker
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: apps/worker/performance-results.json
          retention-days: 30