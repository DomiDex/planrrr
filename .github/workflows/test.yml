name: Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DATABASE_URL: postgresql://planrrr:test@localhost:5432/planrrr_test
  TEST_DATABASE_URL: postgresql://planrrr:test@localhost:5432/planrrr_test
  TEST_REDIS_HOST: localhost
  TEST_REDIS_PORT: 6379
  TEST_REDIS_PASSWORD: ''
  TEST_REDIS_DB: 1
  NODE_ENV: test

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: planrrr
          POSTGRES_PASSWORD: test
          POSTGRES_DB: planrrr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma client
        run: pnpm db:generate
      
      - name: Push database schema
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://planrrr:test@localhost:5432/planrrr_test
      
      - name: Run tests with coverage
        run: pnpm test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [web, api, worker]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: planrrr
          POSTGRES_PASSWORD: test
          POSTGRES_DB: planrrr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma client
        run: pnpm db:generate
      
      - name: Push database schema
        run: pnpm db:push
        env:
          DATABASE_URL: postgresql://planrrr:test@localhost:5432/planrrr_test
      
      - name: Run tests for ${{ matrix.package }}
        run: pnpm --filter @repo/${{ matrix.package }} test:run
      
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.package }}
          path: apps/${{ matrix.package }}/coverage/

  type-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma client
        run: pnpm db:generate
      
      - name: Run type checking
        run: pnpm check-types