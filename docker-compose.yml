services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: planrrr_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-planrrr}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-localdev123}
      POSTGRES_DB: ${POSTGRES_DB:-planrrr_dev}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-planrrr} -d ${POSTGRES_DB:-planrrr_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - planrrr_network

  # Redis Cache & Queue
  redis:
    image: redis:7.4-alpine
    container_name: planrrr_redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_PASSWORD:-localdev123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "-a", "${REDIS_PASSWORD:-localdev123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - planrrr_network

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: planrrr_mailhog
    restart: unless-stopped
    ports:
      - "${SMTP_PORT:-1025}:1025"  # SMTP server
      - "${MAILHOG_UI_PORT:-8025}:8025"  # Web UI
    environment:
      MH_STORAGE: memory
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025/api/v2/messages"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - planrrr_network

  # MinIO for S3-compatible Storage
  minio:
    image: minio/minio:latest
    container_name: planrrr_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_SERVER_URL: http://localhost:9000
    ports:
      - "${MINIO_API_PORT:-9000}:9000"  # API endpoint
      - "${MINIO_CONSOLE_PORT:-9001}:9001"  # Web console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    networks:
      - planrrr_network

  # MinIO Client Setup (one-time bucket creation)
  minio-setup:
    image: minio/mc:latest
    container_name: planrrr_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set planrrr http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin123};
      mc mb --ignore-existing planrrr/planrrr-local;
      mc mb --ignore-existing planrrr/planrrr-media;
      mc mb --ignore-existing planrrr/planrrr-uploads;
      mc anonymous set download planrrr/planrrr-media;
      mc admin user add planrrr ${MINIO_ACCESS_KEY:-planrrr_access} ${MINIO_SECRET_KEY:-planrrr_secret123};
      mc admin policy attach planrrr readwrite --user ${MINIO_ACCESS_KEY:-planrrr_access};
      echo 'MinIO buckets created successfully';
      exit 0;
      "
    networks:
      - planrrr_network

# Docker volumes for persistent data
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/minio

# Network configuration
networks:
  planrrr_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16